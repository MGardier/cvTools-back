// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

  enum UserStatus {
    ALLOWED
    PENDING
    BANNED
  }

  enum UserRoles {
    ADMIN
    USER
  }


  enum PrismaTokenType {
    REFRESH
    FORGOT_PASSWORD
    CONFIRM_ACCOUNT
  }


 enum LoginMethod {
    CLASSIC
    GITHUB
    GOOGLE
  }

model User {
    @@map("user")

    id              Int                @id @default(autoincrement())
    email           String             @unique 
    status          UserStatus         @default(ALLOWED)
    password        String?             
    createdAt       DateTime           @default(now()) @map("created_at")
    updatedAt       DateTime?          @updatedAt      @map("updated_at")
    roles           UserRoles        
    tokens          UserToken[] 
    jobs            Job[] 
    loginMethod     LoginMethod
    oauthId         String?            @map("oauth_id")

    @@unique([loginMethod, oauthId], name: "unique_oauth_user")
  }

model UserToken {
    @@map("user_token")

    id              Int                @id @default(autoincrement())
    token           String             @db.Text
    type            PrismaTokenType
    expiresIn       DateTime           @map("expires_in")
    uuid            String?            @unique
    createdAt       DateTime           @default(now()) @map("created_at")
    userId          Int                @map("user_id")
    user            User               @relation(fields: [userId], references: [id])
  }

  enum TableNameTypeForFile {
    PERSONALINFO
    JOB

  }

  enum EntityTypeForAddress {
    PERSONALINFO
    JOB

  }

model Address {

  @@map("address")

  id            Int                       @id @default(autoincrement())
  city          String
  postalCode    String                    @map("postal_code")
  createdAt     DateTime                  @default(now())  @map("created_at")
  updatedAt     DateTime?                 @updatedAt        @map("updated_at")
  entityType    EntityTypeForAddress      @map("entity_type")
  entityId      Int                       @map("table_id")

}



model Technology {
  @@map("technology")

  id          Int     @id @default(autoincrement())
  name        String  @unique()
  jobs        Job[]
}


enum TypeEnterprise {
  ESN
  START_UP
  ENTERPRISE
}

enum JobStatus {
  NEED_TO_CONTACT
  NEED_TO_VALIDATE_MESSAGE
  NEED_TO_SEND_MESSAGE
  INTERVIEWS
  TECHNICAL_TEST
  NEED_TO_SEND_THANKS_AFTER_INTERVIEW
  NEED_TO_SEND_MAIL_REMINDER
}


enum PriorityJob {
  PERFECT
  ATTAINABLE
  WHY_NOT
}




enum ApplicationMethod {
  LINKEDIN
  SITE_WEB
  EMAIL
  AUTRE
}

model Job {
  @@map("job")
  
  id                     Int             @id @default(autoincrement())
  enterprise            String 
  type                  TypeEnterprise
  link                  String
  jobTitle              String           @map("job_title")
  managerName           String?          @map("manager_name")
  managerEmail          String?          @map("manager_email")
  salaryMin             Int?             @map("salary_min")
  salaryMax             Int?             @map("salary_max")
  salaryCurrency        String?          @default("EUR") @map("salary_currency")


  status                JobStatus
  priority              PriorityJob
  description           String?           @db.Text
  detailsToRemember     String?           @db.Text
  applicationMethod     ApplicationMethod
  interviewCount        Int               @default(0) @map("interview_count")
  rejectionReason       String?           @map("rejection_reason")
  rating                Int?
  archived              Boolean           @default(false)

  createdAt             DateTime          @default(now())   @map("created_at")
  updatedAt             DateTime?         @updatedAt        @map("updated_at")
  appliedAt             DateTime          @map("applied_at")
  lastContactAt         DateTime?         @map("last_contact_at")

  technologies          Technology[]
  userId                Int               @map("user_id")
  user                  User              @relation(fields: [userId], references: [id])

  @@index([userId])

}
